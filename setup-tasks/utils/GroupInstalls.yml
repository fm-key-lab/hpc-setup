version: '3'

vars:
  GROUP_HOME:
    sh: echo $GROUP_HOME
  GROUP_BIN: '{{.GROUP_HOME}}/bin'
  GROUP_CONTAINERS: '{{.GROUP_HOME}}/containers'
  GROUP_MODULEFILES: '{{.GROUP_HOME}}/Modules/modulefiles'

includes:
  utils: ../../lab-tasks

tasks:
  complete:
    cmds:
      - for: { var: EXE }
        task: symlink-to-group-bin
        vars:
          EXE: '{{.ITEM}}'
          RELPATH_EXE: '{{.RELPATH_EXE}}'
          SUBDIR: '{{.APP}}/{{.VERSION}}'
      - task: write-modulefile-stub
        vars:
          APP: '{{.APP}}'
          RELPATH_EXE: '{{.RELPATH_EXE}}'
          VERSION: '{{.VERSION}}'
    requires:
      vars: [APP, EXE, RELPATH_EXE, VERSION]

  symlink-to-group-bin:
    vars:
      DIR: '{{.DIR | default .GROUP_BIN}}'
    dir: '{{.DIR}}'
    cmds:
      - ln -s "../opt/{{.SUBDIR}}{{.RELPATH_EXE}}{{.EXE}}" {{.EXE}}
    requires:
      vars: [EXE, RELPATH_EXE, SUBDIR]
    status:
      - test -L {{.DIR}}/{{.EXE}}
  
  # TODO: Move to lab-tasks
  # TODO: Use only major.minor versioning?
  # TODO: Abstract to combine this with modulefile-stub env task
  write-modulefile-stub:
    vars:
      DIR: '{{.GROUP_MODULEFILES}}/{{.APP}}'
      MODULEFILE_SCRIPT: '{{.ROOT_DIR}}/setup-tasks/scripts/write_modulefile.py'
      PYTHON_MODULE: python-waterboa/2024.06
    dir: '{{.DIR}}'
    cmds:
      - task: utils:envmodule:run-inside
        vars:
          CMDS: cd {{.DIR}} && python {{.MODULEFILE_SCRIPT}} --APP {{.APP}} --VERSION {{.VERSION}} --RELPATH_EXE "{{.RELPATH_EXE}}"
          MODULE: '{{.PYTHON_MODULE}}'
    requires:
      vars: [APP, RELPATH_EXE, VERSION]
    status:
      - test -f {{.DIR}}/{{.VERSION}}

  write-env-modulefile-stub:
    vars:
      DIR: '{{.GROUP_MODULEFILES}}/{{.NAME}}'
      MODULEFILE_SCRIPT: '{{.ROOT_DIR}}/setup-tasks/scripts/write_modulefile.py'
      PYTHON_MODULE: python-waterboa/2024.06
    dir: '{{.DIR}}'
    cmds:
      - task: utils:envmodule:run-inside
        vars:
          CMDS: cd {{.DIR}} && python {{.MODULEFILE_SCRIPT}} --NAME {{.NAME}} --VERSION {{.VERSION}} --template venv
          MODULE: '{{.PYTHON_MODULE}}'
    requires:
      vars: [NAME, VERSION]
    status:
      - test -f {{.DIR}}/{{.VERSION}}

  # TODO: Add check for duplicate writes?
  # NOTE: A whitespace character is added to the end of each line in case a line ends with an escape (ie '\')
  #       then trimmed off
  append-modulefile:
    cmds:
      - for: { var: MODULEFILE_LINES }
        cmd: echo -e '{{.ITEM}} ' >> "{{.MODULEFILE}}"
      - task: trim-whitespace
        vars:
          FN: '{{.MODULEFILE}}'
    requires:
      vars: [MODULEFILE_LINES, MODULEFILE]

  trim-whitespace: sed -i 's/[ \t]*$//' {{.FN}}

  # TODO: Deprecate
  create-apptainer:
    vars:
      EXTRA: '{{.EXTRA | default "--notest"}}'
    cmds:
      - task: utils:envmodule:run-inside
        vars:
          CMDS: apptainer build {{.EXTRA}} {{.GROUP_CONTAINERS}}/{{.IMAGE_NAME}}.sif {{.DEFINITION_FILE}}
          MODULE: '{{.APPTAINER_MODULE}}'
    requires:
      vars: [APPTAINER_MODULE, DEFINITION_FILE, IMAGE_NAME]
