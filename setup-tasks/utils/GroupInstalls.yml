version: '3'

vars:
  GROUP_HOME:
    sh: echo $GROUP_HOME
  GROUP_BIN: '{{.GROUP_HOME}}/bin'
  GROUP_CONTAINERS: '{{.GROUP_HOME}}/containers'
  GROUP_MODULEFILES: '{{.GROUP_HOME}}/Modules/modulefiles'

  MAMBA_MODULE: micromamba/2.0.1-0
  RUST_MODULE: rust

includes:
  utils: ../../lab-tasks

tasks:
  complete:
    cmds:
      - for: { var: EXE }
        task: symlink-to-group-bin
        vars:
          EXE: '{{.ITEM}}'
          RELPATH_EXE: '{{.RELPATH_EXE}}'
          SUBDIR: '{{.APP}}/{{.VERSION}}'
      - task: write-modulefile-stub
        vars:
          APP: '{{.APP}}'
          RELPATH_EXE: '{{.RELPATH_EXE}}'
          VERSION: '{{.VERSION}}'
    requires:
      vars: [APP, EXE, RELPATH_EXE, VERSION]

  symlink-to-group-bin:
    vars:
      DIR: '{{.DIR | default .GROUP_BIN}}'
    dir: '{{.DIR}}'
    cmds:
      - ln -s "../opt/{{.SUBDIR}}{{.RELPATH_EXE}}{{.EXE}}" {{.EXE}}
    requires:
      vars: [EXE, RELPATH_EXE, SUBDIR]
    status:
      - test -L {{.DIR}}/{{.EXE}}
  
  # TODO: Move to lab-tasks
  # TODO: Use only major.minor versioning?
  # TODO: Abstract to combine this with modulefile-stub env task
  write-modulefile-stub:
    vars:
      DIR: '{{.GROUP_MODULEFILES}}/{{.APP}}'
      MODULEFILE_SCRIPT: '{{.ROOT_DIR}}/setup-tasks/scripts/write_modulefile.py'
      PYTHON_MODULE: python-waterboa/2024.06
    dir: '{{.DIR}}'
    cmds:
      - task: utils:envmodule:run-inside
        vars:
          CMDS: cd {{.DIR}} && python {{.MODULEFILE_SCRIPT}} --APP {{.APP}} --VERSION {{.VERSION}} --RELPATH_EXE "{{.RELPATH_EXE}}"
          MODULE: '{{.PYTHON_MODULE}}'
    requires:
      vars: [APP, RELPATH_EXE, VERSION]
    status:
      - test -f {{.DIR}}/{{.VERSION}}

  write-env-modulefile-stub:
    vars:
      DIR: '{{.GROUP_MODULEFILES}}/{{.NAME}}'
      MODULEFILE_SCRIPT: '{{.ROOT_DIR}}/setup-tasks/scripts/write_modulefile.py'
      PYTHON_MODULE: python-waterboa/2024.06
    dir: '{{.DIR}}'
    cmds:
      - task: utils:envmodule:run-inside
        vars:
          CMDS: cd {{.DIR}} && python {{.MODULEFILE_SCRIPT}} --NAME {{.NAME}} --VERSION {{.VERSION}} --template venv
          MODULE: '{{.PYTHON_MODULE}}'
    requires:
      vars: [NAME, VERSION]
    status:
      - test -f {{.DIR}}/{{.VERSION}}

  # TODO: Add check for duplicate writes (e.g. have user pass string to grep as a check)
  # NOTE: A whitespace character is added to the end of each line in case a line ends with an escape (ie '\')
  #       then trimmed off
  append-modulefile:
    cmds:
      - for: { var: MODULEFILE_LINES }
        cmd: echo -e '{{.ITEM}} ' >> "{{.MODULEFILE}}"
      - task: trim-whitespace
        vars:
          FN: '{{.MODULEFILE}}'
      - task: replace-group-home
        vars:
          DIR:
            sh: echo $GROUP_HOME
          FN: '{{.MODULEFILE}}'
    requires:
      vars: [MODULEFILE_LINES, MODULEFILE]

  trim-whitespace: sed -i 's/[ \t]*$//' {{.FN}}

  replace-group-home: sed -i 's|{{.DIR}}|$GROUP_HOME|g' {{.FN}}

  # TODO: Deprecate
  create-apptainer:
    vars:
      EXTRA: '{{.EXTRA | default "--notest"}}'
    cmds:
      - task: utils:envmodule:run-inside
        vars:
          CMDS: apptainer build {{.EXTRA}} {{.GROUP_CONTAINERS}}/{{.IMAGE_NAME}}.sif {{.DEFINITION_FILE}}
          MODULE: '{{.APPTAINER_MODULE}}'
    requires:
      vars: [APPTAINER_MODULE, DEFINITION_FILE, IMAGE_NAME]

  # TODO: Abstract this to work with `skani`
  install-with-cargo:
    desc: Group installs using cargo
    internal: true
    vars:
      DIR: '{{.OPT_DIR}}/{{.APP}}/{{.VERSION}}'
    dir: '{{.DIR}}'
    prompt: 'Cargo install {{.APP}} with `--root {{.DIR}}/.cargo`?'
    cmds:
      - mkdir -p .cargo
      - task: utils:envmodule:run-inside
        vars:
          CMDS: cargo install --root {{.DIR}}/.cargo --version {{.VERSION}} {{.APP}}
          MODULE: '{{.RUST_MODULE}}'
    requires:
      vars: [APP, OPT_DIR, RUST_MODULE, VERSION]
    generates:
      - ./.cargo/bin
    status:
      - test -d ./.cargo/bin
      - test -f ./.cargo/bin/{{.APP}}

  install-with-mamba:
    desc: Group installs as mamba env
    prompt: 'Create mamba environment {{.PREFIX}}?'
    cmds:
      - task: utils:envmodule:run-inside
        vars:
          CMDS: micromamba create -p {{.PREFIX}} {{.INSTALL}} -y
          MODULE: '{{.MAMBA_MODULE}}'
    requires:
      vars: [INSTALL, MAMBA_MODULE, PREFIX]
    generates:
      - '{{.PREFIX}}'
      - '{{.PREFIX}}/bin'
    status:
      - test -d '{{.PREFIX}}/bin'

