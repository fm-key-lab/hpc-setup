version: '3'

includes:
  group-installs: ../utils/GroupInstalls.yml
  utils: ../../lab-tasks

# TODO: Unsure whether R required to compile. Needed for modulefile in any case.

tasks:
  install:
    desc: Install ClonalFrameML
    summary: |
      Install ClonalFrameML

        Efficient Inference of Recombination in Whole Bacterial Genomes

      This is the homepage of ClonalFrameML, a software package that performs 
      efficient inference of recombination in bacterial genomes. ClonalFrameML 
      was created by Xavier Didelot and Daniel Wilson. ClonalFrameML can be 
      applied to any type of aligned sequence data, but is especially aimed at 
      analysis of whole genome sequences. It is able to compare hundreds of 
      whole genomes in a matter of hours on a standard Desktop computer. There 
      are three main outputs from a run of ClonalFrameML: a phylogeny with 
      branch lengths corrected to account for recombination, an estimation of 
      the key parameters of the recombination process, and a genomic map of 
      where recombination took place for each branch of the phylogeny.

      ClonalFrameML is a maximum likelihood implementation of the Bayesian 
      software ClonalFrame which was previously described by Didelot and 
      Falush (2007). The recombination model underpinning ClonalFrameML is 
      exactly the same as for ClonalFrame, but this new implementation is a lot 
      faster, is able to deal with much larger genomic dataset, and does not 
      suffer from MCMC convergence issues. A scientific paper describing 
      ClonalFrameML in detail has been published, see 

        Didelot X, Wilson DJ (2015) ClonalFrameML: Efficient Inference of Recombination in Whole Bacterial Genomes. 
        PLoS Comput Biol 11(2): e1004041. doi:10.1371/journal.pcbi.1004041.

      URLs
        - [GitHub](https://github.com/xavierdidelot/ClonalFrameML)
        - [Docs](https://github.com/xavierdidelot/clonalframeml/wiki)
    vars:
      GCC_MODULE: '{{.GCC_MODULE | default "gcc/14"}}'
      R_MODULE: '{{.R_MODULE | default "R/4.4"}}'
      VERSION: '{{.VERSION | default "1.13"}}'
    cmds:
      - task: download-source
        vars:
          VERSION: '{{.VERSION}}'
      - task: compile-source
        vars:
          GCC_MODULE: '{{.GCC_MODULE}}'
          R_MODULE: '{{.R_MODULE}}'
          VERSION: '{{.VERSION}}'
      - task: test
        vars:
          GCC_MODULE: '{{.GCC_MODULE}}'
          R_MODULE: '{{.R_MODULE}}'
          VERSION: '{{.VERSION}}'
      - task: group-installs:complete
        vars:
          APP: clonalframeml
          EXE: ClonalFrameML{{exeExt}}
          RELPATH_EXE: /ClonalFrameML-{{.VERSION}}/src/
          VERSION: '{{.VERSION}}'
      - task: group-installs:append-modulefile
        vars:
          MODULEFILE_LINES: [
            '',
            'depends-on {{.GCC_MODULE}}',
            'depends-on {{.R_MODULE}}',
          ]
          MODULEFILE: '{{.GROUP_MODULEFILES}}/clonalframeml/{{.VERSION}}'

  download-source:
    vars:
      DIR: '{{.OPT_DIR}}/clonalframeml/{{.VERSION}}'
      URL: https://github.com/xavierdidelot/ClonalFrameML/archive/refs/tags/v{{.VERSION}}.tar.gz
    dir: '{{.DIR}}'
    prompt: Download source to {{.DIR}}?
    cmds:
      - wget {{.URL}}
      - defer: rm -f $(basename {{.URL}})
      - tar xf $(basename ${{.URL}})
    requires:
      vars: [OPT_DIR, VERSION]
    status:
      - test -f {{.DIR}}/ClonalFrameML-{{.VERSION}}/src/makefile

  compile-source:
    vars:
      WDIR: '{{.OPT_DIR}}/clonalframeml/{{.VERSION}}/ClonalFrameML-{{.VERSION}}'
    dir: '{{.WDIR}}'
    prompt: Build ClonalFrameML in {{.WDIR}}?
    cmds:
      - task: utils:envmodule:run-inside
        vars:
          CMDS: cd {{.WDIR}}/src && make
          MODULE: '{{.GCC_MODULE}} {{.R_MODULE}}'
    requires:
      vars: [GCC_MODULE, OPT_DIR, R_MODULE, VERSION]
    generates:
      - ./src/ClonalFrameML{{exeExt}}
      - ./testdata
    status:
      - test -f ./src/ClonalFrameML
      - test -d ./testdata
  
  test:
    internal: true
    vars:
      WDIR: '{{.OPT_DIR}}/clonalframeml/{{.VERSION}}/ClonalFrameML-{{.VERSION}}'
    cmds:
      - task: test-version
        vars:
          WDIR: '{{.WDIR}}'
          VERSION: '{{.VERSION}}'
      - task: test-run
        vars:
          WDIR: '{{.WDIR}}'
          MODULES: '{{.GCC_MODULE}} {{.R_MODULE}}'
    requires:
      vars: [GCC_MODULE, OPT_DIR, R_MODULE, VERSION]

  test-version: |
    cd {{.WDIR}} &&
    [[ $(./src/ClonalFrameML -version) == "ClonalFrameML v{{.VERSION}}" ]] || exit 1

  test-run:
    cmds:
      - task: utils:envmodule:run-inside
        vars:
          CMDS: |
            cd {{.WDIR}} && 
            ./src/ClonalFrameML testdata/test.nwk testdata/test.fasta testdata/out
          MODULE: '{{.MODULES}}'
    generates:
      - testdata/out.em.txt
      - testdata/out.importation_status.txt
      - testdata/out.labelled_tree.newick
      - testdata/out.ML_sequence.fasta
      - testdata/out.position_cross_reference.txt
    status:
      - test -f {{.WDIR}}/testdata/out.labelled_tree.newick