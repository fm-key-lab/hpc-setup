version: 3

tasks:
  complete:
    cmds:
      - for: { var: EXE }
        task: symlink
        vars:
          SUBDIR: '{{.APP}}/{{.VERSION}}'
          RELPATH_EXE: '{{.RELPATH_EXE}}'
          EXE: '{{.ITEM}}'
      - task: modulefile
        vars:
          APP: '{{.APP}}'
          VERSION: '{{.VERSION}}'
          RELPATH_EXE: '{{.RELPATH_EXE}}'

  symlink:
    dir: $GROUP_HOME/bin
    cmds:
      - ln -s ../opt/{{.SUBDIR}}{{.RELPATH_EXE}}{{.EXE}} {{.EXE}}
    status:
      - test -L $GROUP_HOME/bin/{{.EXE}}
    requires:
      vars: [SUBDIR, RELPATH_EXE, EXE]

  # TODO: Use only major.minor versioning?
  modulefile:
    dir: $GROUP_HOME/Modules/modulefiles/{{.APP}}
    vars:
      PYTHON_MODULE: python-waterboa/2024.06
    cmds:
      - bash -c '
        module load {{.PYTHON_MODULE}} &&
        python {{.USER_WORKING_DIR}}/tasks/scripts/write_modulefile.py --APP {{.APP}} --VERSION {{.VERSION}} --RELPATH_EXE {{.RELPATH_EXE}} &&
        module unload {{.PYTHON_MODULE}}'
    status:
      - test -f $GROUP_HOME/Modules/modulefiles/{{.APP}}/{{.VERSION}}
    requires:
      vars: [APP, VERSION, RELPATH_EXE]

  check_software:
    silent: True
    cmds:
      - command -v {{.SOFTWARE}} >/dev/null 2>&1 || exit 1
    requires:
      vars: [SOFTWARE]

  cleanup:
    silent: True
    dir: $GROUP_HOME/opt/{{.SUBDIR}}
    cmds:
      - rm -f $(basename ${{.BINARY}})
    requires:
      vars: [SUBDIR, BINARY]